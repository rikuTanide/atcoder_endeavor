#include <bits/stdc++.h>
//#include <boost/multiprecision/cpp_int.hpp>
//namespace mp = boost::multiprecision;
//#include "atcoder/all"

using namespace std;

const double PI = 3.14159265358979323846;
typedef long long ll;
const double EPS = 1e-9;
#define rep(i, n) for (int i = 0; i < (n); ++i)
typedef pair<ll, ll> P;
const ll INF = 10e17;
#define cmin(x, y) x = min(x, y)
#define cmax(x, y) x = max(x, y)
#define ret() return 0;

double equal(double a, double b) {
    return fabs(a - b) < DBL_EPSILON;
}

template<class T>
std::istream &operator>>(std::istream &in, set<T> &o) {
    T a;
    in >> a;
    o.insert(a);
    return in;
}

template<class T>
std::istream &operator>>(std::istream &in, queue<T> &o) {
    ll a;
    in >> a;
    o.push(a);
    return in;
}

template<class T>
bool contain(set<T> &s, T a) { return s.find(a) != s.end(); }

typedef priority_queue<ll, vector<ll>, greater<ll> > PQ_ASK;
int mod = 1000000007;

struct mint {
    ll x; // typedef long long ll;
    mint(ll x = 0) : x((x % mod + mod) % mod) {}

    mint &operator+=(const mint a) {
        if ((x += a.x) >= mod) x -= mod;
        return *this;
    }

    mint &operator-=(const mint a) {
        if ((x += mod - a.x) >= mod) x -= mod;
        return *this;
    }

    mint &operator*=(const mint a) {
        (x *= a.x) %= mod;
        return *this;
    }

    mint operator+(const mint a) const {
        mint res(*this);
        return res += a;
    }

    mint operator-(const mint a) const {
        mint res(*this);
        return res -= a;
    }

    mint operator*(const mint a) const {
        mint res(*this);
        return res *= a;
    }

    mint pow(ll t) const {
        if (!t) return 1;
        mint a = pow(t >> 1);
        a *= a;
        if (t & 1) a *= *this;
        return a;
    }

    // for prime mod
    mint inv() const {
        return pow(mod - 2);
    }

    mint &operator/=(const mint a) {
        return (*this) *= a.inv();
    }

    mint operator/(const mint a) const {
        mint res(*this);
        return res /= a;
    }

    friend std::istream &operator>>(std::istream &in, mint &o) {
        ll a;
        in >> a;
        o = a;
        return in;
    }

    friend std::ostream &operator<<(std::ostream &out, const mint &o) {
        out << o.x;
        return out;
    }

};

vector<ll> get_start(ll n) {
    vector<vector<ll>> v = {
            {0,          0,    1},
            {10000000,   1917, 1527},
            {20000000,   1039, 625},
            {30000000,   973,  94},
            {40000000,   1748, 659},
            {50000000,   1678, 1627},
            {60000000,   1619, 33},
            {70000000,   1482, 175},
            {80000000,   893,  1533},
            {90000000,   1816, 216},
            {100000000,  1917, 1527},
            {110000000,  1039, 625},
            {120000000,  973,  94},
            {130000000,  1748, 659},
            {140000000,  1678, 1627},
            {150000000,  1619, 33},
            {160000000,  1482, 175},
            {170000000,  893,  1533},
            {180000000,  1816, 216},
            {190000000,  1917, 1527},
            {200000000,  1039, 625},
            {210000000,  973,  94},
            {220000000,  1748, 659},
            {230000000,  1678, 1627},
            {240000000,  1619, 33},
            {250000000,  1482, 175},
            {260000000,  893,  1533},
            {270000000,  1816, 216},
            {280000000,  1917, 1527},
            {290000000,  1039, 625},
            {300000000,  973,  94},
            {310000000,  1748, 659},
            {320000000,  1678, 1627},
            {330000000,  1619, 33},
            {340000000,  1482, 175},
            {350000000,  893,  1533},
            {360000000,  1816, 216},
            {370000000,  1917, 1527},
            {380000000,  1039, 625},
            {390000000,  973,  94},
            {400000000,  1748, 659},
            {410000000,  1678, 1627},
            {420000000,  1619, 33},
            {430000000,  1482, 175},
            {440000000,  893,  1533},
            {450000000,  1816, 216},
            {460000000,  1917, 1527},
            {470000000,  1039, 625},
            {480000000,  973,  94},
            {490000000,  1748, 659},
            {500000000,  1678, 1627},
            {510000000,  1619, 33},
            {520000000,  1482, 175},
            {530000000,  893,  1533},
            {540000000,  1816, 216},
            {550000000,  1917, 1527},
            {560000000,  1039, 625},
            {570000000,  973,  94},
            {580000000,  1748, 659},
            {590000000,  1678, 1627},
            {600000000,  1619, 33},
            {610000000,  1482, 175},
            {620000000,  893,  1533},
            {630000000,  1816, 216},
            {640000000,  1917, 1527},
            {650000000,  1039, 625},
            {660000000,  973,  94},
            {670000000,  1748, 659},
            {680000000,  1678, 1627},
            {690000000,  1619, 33},
            {700000000,  1482, 175},
            {710000000,  893,  1533},
            {720000000,  1816, 216},
            {730000000,  1917, 1527},
            {740000000,  1039, 625},
            {750000000,  973,  94},
            {760000000,  1748, 659},
            {770000000,  1678, 1627},
            {780000000,  1619, 33},
            {790000000,  1482, 175},
            {800000000,  893,  1533},
            {810000000,  1816, 216},
            {820000000,  1917, 1527},
            {830000000,  1039, 625},
            {840000000,  973,  94},
            {850000000,  1748, 659},
            {860000000,  1678, 1627},
            {870000000,  1619, 33},
            {880000000,  1482, 175},
            {890000000,  893,  1533},
            {900000000,  1816, 216},
            {910000000,  1917, 1527},
            {920000000,  1039, 625},
            {930000000,  973,  94},
            {940000000,  1748, 659},
            {950000000,  1678, 1627},
            {960000000,  1619, 33},
            {970000000,  1482, 175},
            {980000000,  893,  1533},
            {990000000,  1816, 216},
            {1000000000, 1917, 1527},
            {1010000000, 1039, 625},
            {1020000000, 973,  94},
            {1030000000, 1748, 659},
            {1040000000, 1678, 1627},
            {1050000000, 1619, 33},
            {1060000000, 1482, 175},
            {1070000000, 893,  1533},
            {1080000000, 1816, 216},
            {1090000000, 1917, 1527},
            {1100000000, 1039, 625},
            {1110000000, 973,  94},
            {1120000000, 1748, 659},
            {1130000000, 1678, 1627},
            {1140000000, 1619, 33},
            {1150000000, 1482, 175},
            {1160000000, 893,  1533},
            {1170000000, 1816, 216},
            {1180000000, 1917, 1527},
            {1190000000, 1039, 625},
            {1200000000, 973,  94},
            {1210000000, 1748, 659},
            {1220000000, 1678, 1627},
            {1230000000, 1619, 33},
            {1240000000, 1482, 175},
            {1250000000, 893,  1533},
            {1260000000, 1816, 216},
            {1270000000, 1917, 1527},
            {1280000000, 1039, 625},
            {1290000000, 973,  94},
            {1300000000, 1748, 659},
            {1310000000, 1678, 1627},
            {1320000000, 1619, 33},
            {1330000000, 1482, 175},
            {1340000000, 893,  1533},
            {1350000000, 1816, 216},
            {1360000000, 1917, 1527},
            {1370000000, 1039, 625},
            {1380000000, 973,  94},
            {1390000000, 1748, 659},
            {1400000000, 1678, 1627},
            {1410000000, 1619, 33},
            {1420000000, 1482, 175},
            {1430000000, 893,  1533},
            {1440000000, 1816, 216},
            {1450000000, 1917, 1527},
            {1460000000, 1039, 625},
            {1470000000, 973,  94},
            {1480000000, 1748, 659},
            {1490000000, 1678, 1627},
            {1500000000, 1619, 33},
            {1510000000, 1482, 175},
            {1520000000, 893,  1533},
            {1530000000, 1816, 216},
            {1540000000, 1917, 1527},
            {1550000000, 1039, 625},
            {1560000000, 973,  94},
            {1570000000, 1748, 659},
            {1580000000, 1678, 1627},
            {1590000000, 1619, 33},
            {1600000000, 1482, 175},
            {1610000000, 893,  1533},
            {1620000000, 1816, 216},
            {1630000000, 1917, 1527},
            {1640000000, 1039, 625},
            {1650000000, 973,  94},
            {1660000000, 1748, 659},
            {1670000000, 1678, 1627},
            {1680000000, 1619, 33},
            {1690000000, 1482, 175},
            {1700000000, 893,  1533},
            {1710000000, 1816, 216},
            {1720000000, 1917, 1527},
            {1730000000, 1039, 625},
            {1740000000, 973,  94},
            {1750000000, 1748, 659},
            {1760000000, 1678, 1627},
            {1770000000, 1619, 33},
            {1780000000, 1482, 175},
            {1790000000, 893,  1533},
            {1800000000, 1816, 216},
            {1810000000, 1917, 1527},
            {1820000000, 1039, 625},
            {1830000000, 973,  94},
            {1840000000, 1748, 659},
            {1850000000, 1678, 1627},
            {1860000000, 1619, 33},
            {1870000000, 1482, 175},
            {1880000000, 893,  1533},
            {1890000000, 1816, 216},
            {1900000000, 1917, 1527},
            {1910000000, 1039, 625},
            {1920000000, 973,  94},
            {1930000000, 1748, 659},
            {1940000000, 1678, 1627},
            {1950000000, 1619, 33},
            {1960000000, 1482, 175},
            {1970000000, 893,  1533},
            {1980000000, 1816, 216},
            {1990000000, 1917, 1527},
            {2000000000, 1039, 625},
            {2010000000, 973,  94},
            {2020000000, 1748, 659},
            {2030000000, 1678, 1627},
            {2040000000, 1619, 33},
            {2050000000, 1482, 175},
            {2060000000, 893,  1533},
            {2070000000, 1816, 216},
            {2080000000, 1917, 1527},
            {2090000000, 1039, 625},
            {2100000000, 973,  94},
            {2110000000, 1748, 659},
            {2120000000, 1678, 1627},
            {2130000000, 1619, 33},
            {2140000000, 1482, 175},
    };
    reverse(v.begin(), v.end());
    for (vector<ll> &u : v) {
        if (u[0] <= n) {
            return u;
        }
    }
}

void make() {
    ll n = 1ll << 31, m = 1999;
    mint p1 = 0;
    mint p2 = 1;

    for (ll i = 1; i < n; i++) {
        mint now = p2.pow(2) + p1.pow(2);
        p2 = p1;
        p1 = now;

        if (i % 10000000 == 0) {
            cout << i << ' ' << p1 << ' ' << p2 << endl;
        }

    }

}

void solve() {

    int n, m;
    cin >> n >> m;
    mod = m;

    assert(m == 1999);

    auto v = get_start(n);

    mint p1 = v[1];
    mint p2 = v[2];

    for (ll i = v[0] + 1; i < n; i++) {
        mint now = p2.pow(2) + p1.pow(2);
        p2 = p1;
        p1 = now;

    }

    cout << p1 << endl;
}


int main() {
    solve();
}